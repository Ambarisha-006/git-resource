#!/bin/bash
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

# for jq
PATH=/usr/local/bin:$PATH

payload=$TMPDIR/git-resource-request

cat > $payload <&0

load_pubkey $payload
configure_https_tunnel $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
paths="$(jq -r '(.source.paths // ["."])[]' < $payload)" # those "'s are important
ignore_paths="$(jq -r '":!" + (.source.ignore_paths // [])[]' < $payload)" # these ones too
tag_filter=$(jq -r '.source.tag_filter // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.version.ref // ""' < $payload)
skip_ci_disabled=$(jq -r '.source.disable_ci_skip // false' < $payload)
filterWhitelist=$(jq -r '.source.filter.include // []' < $payload)
filterBlacklist=$(jq -r '.source.filter.exclude // []' < $payload)

configure_git_global "${git_config_payload}"

destination=$TMPDIR/git-resource-repo-cache

tagflag=""
if [ -n "$tag_filter" ]; then
  tagflag="--tags"
fi

# We're just checking for commits; we don't ever need to fetch LFS files here!
export GIT_LFS_SKIP_SMUDGE=1

if [ -d $destination ]; then
  cd $destination
  git fetch $tagflag -f
  git reset --hard FETCH_HEAD
else
  branchflag=""
  if [ -n "$branch" ]; then
    branchflag="--branch $branch"
  fi

  git clone --single-branch $uri $branchflag $destination $tagflag
  cd $destination
fi

if [ -n "$ref" ] && git cat-file -e "$ref"; then
  init_commit=$(git rev-list --max-parents=0 HEAD)
  if [ "${ref}" = "${init_commit}" ]; then
    log_range="--reverse HEAD"
  else
    log_range="--reverse ${ref}~1..HEAD"
  fi
else
  log_range="-1"
  ref=""
fi

if [ "$paths" = "." ] && [ -z "$ignore_paths" ]; then
  paths_search=""
else
  paths_search=`echo "-- $paths $ignore_paths" | tr "\n\r" " "`
fi

filter="git rev-list --all --first-parent"
if [ `echo $filterWhitelist | jq -r '. | length'` -gt 0 ]
then
    whitelistItems=$(echo $filterWhitelist | jq -r -c '.[]')
    for wli in "$whitelistItems"
    do
        filter="$filter | git rev-list --stdin --grep=\"$wli\" --first-parent"
    done
fi

if [ `echo $filterBlacklist | jq -r '. | length'` -gt 0 ]
then
    blacklistItems=$(echo $filterBlacklist | jq -r -c '.[]')
    for bli in "$blacklistItems"
    do
        filter="$filter | git rev-list --stdin --grep=\"$wli\" --invert-grep --first-parent"
    done
fi


if [ "$skip_ci_disabled" != "true" ]; then
  filter="$filter | git rev-list --stdin --grep=\"\\[ci\\sskip\\]\" --grep=\"\\[skip\\sci\\]\" --invert-grep --first-parent"
fi

replace_escape_chars() {
  sed -e 's/[]\/$*.^[]/\\&/g' <<< $1
}

lines_including_and_after() {
  local escaped_string=$(replace_escape_chars $1)
  sed -ne "/$escaped_string/,$ p"
}

get_commit(){
  for tag in $*; do
    commit=$(git rev-list -n 1 $tag)
    jq -n '{ref: $tag, commit: $commit}' --arg tag $tag --arg commit $commit
  done
}

echo "$filter $log_range $paths_search"

if [ -n "$tag_filter" ]; then
  {
    if [ -n "$ref" ] && [ -n "$branch" ]; then
      tags=$(git tag --list "$tag_filter" --sort=creatordate --contains $ref --merged $branch)
      get_commit $tags
    elif [ -n "$ref" ]; then
      tags=$(git tag --list "$tag_filter" --sort=creatordate | lines_including_and_after $ref)
      get_commit $tags
    else
      branch_flag=
      if [ -n "$branch" ]; then
        branch_flag="--merged $branch"
      fi
      tag=$(git tag --list "$tag_filter" --sort=creatordate $branch_flag | tail -1)
      get_commit $tag
    fi
  } | jq -s "map(.)" >&3
else
  {
    set -f
    eval "$filter $log_range $paths_search"
    set +f
  } | jq -R '.' | jq -s "map({ref: .})" >&3
fi
